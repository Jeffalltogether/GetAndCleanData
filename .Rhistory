library(swirl)
swirl()
R.version.string
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(swirl)
swirl()
q
quit
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head()
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
library(swirl)
swirl()
quit
q()
### Variables
pP <- 0.2       # % of population that is positive
pN <- 0.8       # % of population that is negative
CPc <- 4.1       # # of deaths per 100 people
CNc <- 0.0       # cost of performing the test
FPc <- 0.8       # # of unnecessary mortalities per 100 people
FNc <- 8.2       # # of deaths per 100 people
unitC <- 0.0    # Cost of test
SENSt <- 0.5
SPECt <- 0.9
Ecost <- unitC + (CPc*SENSt*pP) + FPc *( 1-SPECt) * pN + CNc * SPECt * pN + FNc * (1-SENSt) * pP
Ecost <- unitC + (CPc*SENSt*pP) + FPc *( 1-SPECt) * pN + CNc * SPECt * pN + FNc * (1-SENSt) * pP
Ecost <- unitC + (CPc*SENSt*pP) + FPc *( 1-SPECt) * pN + CNc * SPECt * pN + FNc * (1-SENSt) * pP
SENSt <- 0.9
SPECt <- 0.9
Ecost <- unitC + (CPc*SENSt*pP) + FPc *( 1-SPECt) * pN + CNc * SPECt * pN + FNc * (1-SENSt) * pP
### Cost-effectiveness Analysis
### Variables
pP <- 0.2       # % of population that is positive
pN <- 0.8       # % of population that is negative
CPc <- 4.1       # # of deaths per 100 people
CNc <- 0.0       # cost of performing the test
FPc <- 0.8       # # of unnecessary mortalities per 100 people
FNc <- 8.2       # # of deaths per 100 people
unitC <- 0.0    # Cost of test
SENSt <- 0.9
SPECt <- 0.9
Ecost <- unitC + (CPc*SENSt*pP) + FPc *( 1-SPECt) * pN + CNc * SPECt * pN + FNc * (1-SENSt) * pP
## Variables
pP <- 0.2       # % of population that is positive
pN <- 0.8       # % of population that is negative
CPc <- 4.1       # # of deaths per 100 people
CNc <- 0.0       # cost of performing the test
FPc <- 0.8       # # of unnecessary mortalities per 100 people
FNc <- 8.2       # # of deaths per 100 people
unitC <- 0.0    # Cost of test
SENSt <- 1.0
SPECt <- 1.0
Ecost <- unitC + (CPc*SENSt*pP) + FPc *( 1-SPECt) * pN + CNc * SPECt * pN + FNc * (1-SENSt) * pP
### Variables
pP <- 0.2       # % of population that is positive
pN <- 0.8       # % of population that is negative
CPc <- 4.1       # # of deaths per 100 people
CNc <- 0.0       # cost of performing the test
FPc <- 0.8       # # of unnecessary mortalities per 100 people
FNc <- 8.2       # # of deaths per 100 people
unitC <- 0.0    # Cost of test
SENSt <- 0
SPECt <- 0
Ecost <- unitC + (CPc*SENSt*pP) + FPc *( 1-SPECt) * pN + CNc * SPECt * pN + FNc * (1-SENSt) * pP
### Variables
pP <- 0.2       # % of population that is positive
pN <- 0.8       # % of population that is negative
CPc <- 4.1       # # of deaths per 100 people
CNc <- 0.0       # cost of performing the test
FPc <- 0.8       # # of unnecessary mortalities per 100 people
FNc <- 8.2       # # of deaths per 100 people
unitC <- 0.0    # Cost of test
SENSt <- 0.9
SPECt <- 0.9
Ecost <- unitC + (CPc*SENSt*pP) + FPc *( 1-SPECt) * pN + CNc * SPECt * pN + FNc * (1-SENSt) * pP
### Variables
pP <- 0.2       # % of population that is positive
pN <- 0.8       # % of population that is negative
CPc <- 4.1       # # of deaths per 100 people
CNc <- 0.0       # cost of performing the test
FPc <- 0.8       # # of unnecessary mortalities per 100 people
FNc <- 8.2       # # of deaths per 100 people
unitC <- 0.0    # Cost of test
SENSt <- 0.5
SPECt <- 0.5
Ecost <- unitC + (CPc*SENSt*pP) + FPc *( 1-SPECt) * pN + CNc * SPECt * pN + FNc * (1-SENSt) * pP
### Variables
pP <- 0.2       # % of population that is positive
pN <- 0.8       # % of population that is negative
CPc <- 4.1       # # of deaths per 100 people
CNc <- 0.0       # cost of performing the test
FPc <- 0.8       # # of unnecessary mortalities per 100 people
FNc <- 8.2       # # of deaths per 100 people
unitC <- 0.0    # Cost of test
SENSt <- 0.7
SPECt <- 0.7
Ecost <- unitC + (CPc*SENSt*pP) + FPc *( 1-SPECt) * pN + CNc * SPECt * pN + FNc * (1-SENSt) * pP
### Variables
pP <- 0.2       # % of population that is positive
pN <- 0.8       # % of population that is negative
CPc <- 4.1       # # of deaths per 100 people
CNc <- 0.0       # cost of performing the test
FPc <- 0.8       # # of unnecessary mortalities per 100 people
FNc <- 8.2       # # of deaths per 100 people
unitC <- 0.0    # Cost of test
SENSt <- 0.5
SPECt <- 0.5
Ecost <- unitC + (CPc*SENSt*pP) + FPc *( 1-SPECt) * pN + CNc * SPECt * pN + FNc * (1-SENSt) * pP
### Variables
pP <- 0.2       # % of population that is positive
pN <- 0.8       # % of population that is negative
CPc <- 4.1       # # of deaths per 100 people
CNc <- 0.0       # cost of performing the test
FPc <- 0.8       # # of unnecessary mortalities per 100 people
FNc <- 8.2       # # of deaths per 100 people
unitC <- 0.0    # Cost of test
SENSt <- 0.8
SPECt <- 0.8
Ecost <- unitC + (CPc*SENSt*pP) + FPc *( 1-SPECt) * pN + CNc * SPECt * pN + FNc * (1-SENSt) * pP
### Variables
pP <- 0.2       # % of population that is positive
pN <- 0.8       # % of population that is negative
CPc <- 4.1       # # of deaths per 100 people
CNc <- 0.0       # cost of performing the test
FPc <- 0.8       # # of unnecessary mortalities per 100 people
FNc <- 8.2       # # of deaths per 100 people
unitC <- 0.0    # Cost of test
SENSt <- 0.9
SPECt <- 0.9
Ecost <- unitC + (CPc*SENSt*pP) + FPc *( 1-SPECt) * pN + CNc * SPECt * pN + FNc * (1-SENSt) * pP
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res = gather(students2, key = sex_class, value = count)
res = gather(students2, key = "sex_class", value = "count")
res = gather(students2, sex_class, count, -grade)
res = gather(students2, sex_class, count, -grade)
res = gather(students2, sex_class, count, -grade)
res = gather(students2, sex_class, count, -grade)
students2
res = gather(students2, key = sex_class, value = count, -grade)
gather(students2, sex_class, count, -grade)
nxt()
rm(res)
q()
library(swirl)
swirl()
q()
library(swirl)
swirl()
library(dplyr)
q()
library(swirl)
swirl()
exit()
q()
library(swirl)
swirl()
library(tidyr)
students
install.packages("proc")
setwd("C:/Users/jeffthatcher/Cloud Drive/RRepos/GetCleanData")
### Quiz 3
setwd("C:/Users/jeffthatcher/Cloud Drive/RRepos/GetCleanData")
library(data.table)
library(dplyr)
library(tidyr)
### Quiz 3
setwd("C:/Users/jeffthatcher/Cloud Drive/RRepos/GetCleanData")
library(data.table)
library(dplyr)
library(tidyr)
if(!file.exists("q3data")) {
dir.create("q3data")
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "./q3data/idaho.csv") #curl is necessary for MAC users getting data from https
list.files("./data") # sort of like the ls() command, shows the files in the directory "./data"
idaho <- read.csv("./q3data/idaho.csv")
idaho <-(idaho)
idaho2 <- %>%
idaho2 <-
idaho2 <-
idaho2 <-
idaho %>%
select(wgtp) %>%
strsplit(idaho, "wgtp") %>%
print()
idaho2 <-
idaho %>%
select(wgtp) %>%
strsplit(idaho, "WGTP") %>%
print()
str(idaho)
?strsplit
idaho2 <-
idaho %>%
select(wgtp) %>%
strsplit(wgtp) %>%
print()
# characters "wgtp". What is the value of the 123 element of the resulting list?
idaho2 <-
idaho %>%
select(WGTP)
head(idaho2)
# characters "wgtp". What is the value of the 123 element of the resulting list?
idaho2 <-
idaho %>%
select(WGTP) %>%
strsplit(WGTP) %>%
print()
head(idaho)
# characters "wgtp". What is the value of the 123 element of the resulting list?
idaho2 <-
idaho %>%
strsplit("wgtp") %>%
print()
strsplit(names(idaho), "wgtp")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv "
download.file(fileUrl, destfile = "./q3data/gdp.csv") #curl is necessary for MAC users getting data from https
list.files("./q3data") # so
head(gpd)
gdp <- read.csv("./q3data/gdp.csv")
head(gdp)
gdp <- read.csv("./q3data/gdp.csv", skip = 4)
head(gdp)
gdp[,X.4]
gdp[X.4]
gdp[X.4,]
colnames(gdp)
gdp[,X.4]
gdp[X.4]
gdp$X.4
?gsub()
y <- as.numeric(gsub(",","", gdp$X.4))
y <- as.numeric(gsub(",","", gdp$X.4)
head(y)
is.na(y)
y <- y[!is.na(y)]
is.na(y)
ave <- mean(y)
str(gdp)
gdp <- read.csv("./q3data/gdp.csv")
head(gdp)
head(gdp, 15)
head(y, 15)
mean(y)
length(y)
tail(gdp, 15)
?read.csv
gdp <- read.csv("./q3data/gdp.csv", skip = 4, nrows = 190)
tail(gdp)
gdp <- read.csv("./q3data/gdp.csv", skip = 4, nrows = 190)
y <- as.numeric(gsub(",","", gdp$X.4)
y <- y[!is.na(y)]
y <- as.numeric(gsub(",","", gdp$X.4)
)
y <- y[!is.na(y)]
ave <- mean(y)
?colnames
head(gdp)
gdp <- read.csv("./q3data/gdp.csv", skip = 4, nrows = 190, col.names = c("c1","c2","c3","countryNames","c5","c6","c7","c8","c9","c10"))
colnames(gdp)
head(gdp)
gdp <- read.csv("./q3data/gdp.csv", skip = 4, nrows = 190, col.names = c("c1","c2","c3","countryNames","c5","c6","c7","c8","c9","c10"))
y <- as.numeric(gsub(",","", gdp$c5))
y <- y[!is.na(y)]
ave <- mean(y)
gdp <- colnames(gdp, y)
f <- grep("*United",gdp$countryNames), 5)
f <- grep("*United",gdp$countryNames), 5
f <- grep("^United",countryNames), 4
f <- grep("United$",countryNames), 3
f <- grep("^United",countryNames), 3
f <- grep("*United",gdp$countryNames)
?grep
gdp[,countryNames]
gdp$countryNames
head(gdp)
gdp$c1
gdp <- read.csv("./q3data/gdp.csv", skip = 4, nrows = 190, col.names = c("c1","c2","c3","countryNames","c5","c6","c7","c8","c9","c10"))
head(gdp)
gdp$countryNames
f <- grep("*United",gdp$countryNames), 5
f <- grep("*United",gdp$countryNames)
f <- grep("^United",gdp$countryNames)
f <- grep("United$",gdp$countryNames)
f <- grep("^United",gdp$countryNames)
a <- grep("*United",gdp$countryNames)
b <- grep("^United",gdp$countryNames)
c <- grep("United$",gdp$countryNames)
d <- grep("^United",gdp$countryNames)
## Question 4
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl, destfile = "./q3data/edu.csv") #curl is necessary for MAC users getting data from https
list.files("./q3data") # so
edu <- read.csv("./q3data/edu.csv", skip = 0)
head(edu)
str(edu)
?match
f <- match(gdp$c1, edu$CountryCode, nomatch = NA_integer_, incomparables = NULL)
f
?merge
g <- merge(gdp, edu, by.x = gdp$c1, by.y = edu$CountryCode)
gdp$c1
edu$CountryCode
g <- merge(gdp, edu, by.x = gdp$c1, by.y = edu$CountryCode)
g <- merge(gdp, edu, all.x)
g <- merge(gdp, edu, all = TRUE)
str(g)
h <- g$$c1 == g$CountryCode
h <- g$c1 == g$CountryCode
head(g$c1)
head(g$CountryCode)
g <- merge(gdp, edu, by.x = c1, by.y = CountryCode)
g <- merge(gdp, edu, by.x = gdp$c1, by.y = CountryCode)
g <- merge(gdp, edu, by.x = gdp$c1, by.y = edu$CountryCode)
merge(gdp, edu, all = TRUE, by = c("CountryCode"))
gdp <- read.csv("./q3data/gdp.csv", skip = 4, nrows = 190, col.names = c("CountryCode","c2","c3","countryNames","c5","c6","c7","c8","c9","c10"))
merge(gdp, edu, all = TRUE, by = c("CountryCode"))
isFiscalYearEnd <- grepl("fiscal year end", tolower(dt$Special.Notes))
isFiscalYearEnd <- grepl("fiscal year end", tolower(g$Special.Notes))
isJune <- grepl("june", tolower(g$Special.Notes))
table(isFiscalYearEnd, isJune)
?tolower
isFiscalYearEnd
str(g)
summary(c)
<- grep("*United",gdp$countryNames)
b <- grep("^United",gdp$countryNames)
c <- grep("United$",gdp$countryNames)
d <- grep("^United",gdp$countryNames)
a <- grep("*United",gdp$countryNames)
b <- grep("^United",gdp$countryNames)
c <- grep("United$",gdp$countryNames)
d <- grep("^United",gdp$countryNames)
summary(c)
summary(d)
d
g[isFiscalYearEnd & isJune, Special.Notes]
g[isFiscalYearEnd & isJune]
g <- merge(gdp, edu, all = TRUE, by = c("CountryCode"))
isFiscalYearEnd <- grepl("fiscal year end", tolower(g$Special.Notes))
isJune <- grepl("june", tolower(g$Special.Notes))
table(isFiscalYearEnd, isJune)
g <- merge(gdp, edu, all = TRUE, by = c("CountryCode"))
FYearEnd <- grepl("fiscal year end", tolower(g$Special.Notes))
June <- grepl("june", tolower(g$Special.Notes))
table(isFiscalYearEnd, isJune)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
ymd(20070103)
library(lubridate)
ymd(20070103)
sampleTimes <- index(amzn)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
?addmargins
g <- merge(gdp, edu, all = TRUE, by = c("CountryCode"))
FYearEnd <- grepl("fiscal year end", tolower(g$Special.Notes))
June <- grepl("june", tolower(g$Special.Notes))
table(FYearEnd, June)
## Question 5
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
